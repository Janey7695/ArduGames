#include "flappybird.h"

//位图资源
const unsigned char Birdflyup[30]= //翅膀向上（鸟向下掉）
{
    0xF0,0x08,0x0C,0x12,0x31,0xC1,0x1D,0xB3,0x41,0x5B,0x5A,0x46,0x78,0xC0,0x80,0x00,
    0x01,0x02,0x07,0x09,0x08,0x08,0x09,0x0A,0x04,0x05,0x05,0x05,0x02,0x00,
};

const unsigned char Birdflymid[30]=
{
    0xC0,0x30,0x2C,0x22,0x21,0xC1,0x1D,0xB3,0x41,0x5B,0x5A,0x46,0x78,0xC0,0x80,0x00,
    0x01,0x03,0x05,0x09,0x08,0x08,0x09,0x0A,0x04,0x05,0x05,0x05,0x02,0x00,
};

const unsigned char Birdflydown[30]=//翅膀向下（鸟向上飞）
{
    0xC0,0x30,0x2C,0x22,0x21,0xC1,0x1D,0xB3,0x41,0x5B,0x5A,0x46,0x78,0xC0,0x80,0x03,
    0x04,0x02,0x06,0x09,0x08,0x08,0x09,0x0A,0x04,0x05,0x05,0x05,0x02,0x00,
};

const unsigned char Pillar_UpOrientation[160]={ //柱子（口朝上）
    0xFF,0x91,0xEB,0xA1,0xD5,0x83,0x95,0xE9,0x93,0xC9,0xE7,0xAB,0xDD,0xF7,0xBF,0xDB,
    0xFF,0xFF,0xFF,0xFF,0x00,0x00,0xFF,0xFF,0xFF,0xB6,0x01,0x6C,0x00,0x68,0x25,0x86,
    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xCD,0x43,0xA0,
    0x04,0xD0,0x63,0x5D,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0xFF,
    0xFF,0x16,0x8A,0x39,0x00,0x02,0x70,0x72,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,
    0x00,0x00,0xFF,0xFF,0xFF,0x53,0x70,0x57,0x00,0x31,0xD2,0x43,0xFF,0xFF,0xFF,0xFF,
    0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xDF,0x70,0xE0,0x00,0x9A,0x03,0xD9,
    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0xFF,0xDF,0xB2,0xB4,0xC3,
    0x22,0x03,0x31,0x6A,0x7D,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0xFF,
    0xFF,0x55,0xA4,0x14,0x00,0xC4,0xAE,0x39,0xF8,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,
};

const unsigned char Pillar_DownOrientation[160]={//柱子（口朝下）
    0x00,0x00,0xFF,0xFF,0xFF,0xAA,0x25,0x28,0x00,0x23,0x75,0x9C,0x1F,0xFF,0xFF,0xFF,
    0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFB,0x4D,0x2D,0xC3,0x44,0xC0,0x8C,0x56,
    0xBE,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFB,0x0E,0x07,
    0x00,0x59,0xC0,0x9B,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0xFF,
    0xFF,0xCA,0x0E,0xEA,0x00,0x8C,0x4B,0xC2,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,
    0x00,0x00,0xFF,0xFF,0xFF,0x68,0x51,0x9C,0x00,0x40,0x0E,0x4E,0xFF,0xFF,0xFF,0xFF,
    0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xB3,0xC2,0x05,0x20,0x0B,0xC6,0xBA,
    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0x6D,0x80,0x36,
    0x00,0x16,0xA4,0x61,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0xFF,0x89,0xD7,0x85,
    0xAB,0xC1,0xA9,0x97,0xC9,0x93,0xE7,0xD5,0xBB,0xEF,0xFD,0xDB,0xFF,0xFF,0xFF,0xFF,
};

const unsigned char gameBeginBeforeMenu[1024]={ //起始菜单
	0xF0,0xF8,0xF8,0xFC,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0xFE,0x00,0x00,0xFC,0xFC,
0xFC,0xFC,0xFC,0xFC,0xFC,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,
0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x00,0x00,0x40,0x40,0x20,0x00,0x00,
0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF8,0xF4,0xE0,0xC0,0x20,0x20,0x40,
0x40,0x40,0x40,0x40,0x40,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xEC,0x00,0xF8,0xFC,0xFC,0xFC,0xFC,0xFC,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFB,0xE9,0xF9,0xE8,0xF8,0xA8,0xF8,0x00,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xE8,0xF6,0xFA,0xFF,0xFD,0xFF,0xFD,0xFF,0xFD,0xFF,0xFD,
0xFF,0xFD,0x01,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFD,0xF8,0xF0,0xE0,
0xE0,0x01,0xF9,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xFD,0xF8,0xF8,0xF2,0xE0,0x03,
0x00,0xFE,0xFF,0xFF,0xFF,0xFF,0xFE,0x00,0xFE,0xFF,0xFF,0xFF,0xFF,0xFE,0x00,0x00,
0xFF,0xFF,0xFF,0xFF,0xFF,0xF9,0xF8,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x3E,0x3F,
0x3F,0x3F,0x3F,0x1F,0x00,0xC0,0xE0,0xFA,0xF9,0xFD,0xFD,0xFD,0xFC,0xFE,0xFE,0xFE,
0x7C,0x78,0x01,0x04,0xF0,0xF8,0xF9,0xFC,0xFE,0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xAB,0x55,0xFE,0x03,0x02,0x03,0x01,0x00,0xFF,0xFF,
0xFF,0xFF,0xFF,0xD5,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0xC0,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0x0A,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0xE0,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC0,0xC0,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,
0x00,0x3F,0x7F,0xFF,0xFF,0xFF,0xFF,0xFC,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC7,0xFF,0xFF,0xFF,0xFF,0xFF,0x7F,0x00,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x01,0x00,0x00,0x00,
0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0x6F,0x5F,0x6F,0x5F,0x6F,0x5F,0x2A,0x35,0x0F,0x00,0x00,0x00,0x40,0x44,0x6F,0x77,
0x6F,0x77,0x6F,0x77,0x7F,0x28,0x37,0x2F,0x1F,0x2F,0x3F,0x2F,0x3F,0x2F,0x7F,0x6F,
0x5F,0x8F,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x0F,0x07,0x07,0x03,0x03,0x21,
0x80,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x0F,0x0F,0x0F,0x07,0x13,0x09,0x00,
0x00,0x00,0x04,0xF0,0x01,0xF1,0xF1,0xF9,0xFF,0xFF,0xFF,0xFF,0x7F,0x7F,0x00,0x00,
0x07,0x47,0x47,0x47,0x47,0x47,0x47,0x47,0x47,0x43,0x03,0x01,0x20,0x40,0x47,0x47,
0x47,0x07,0x07,0x07,0x00,0x07,0x47,0x47,0x47,0x47,0x47,0x47,0x40,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x11,0x01,0x43,0x47,0x47,0x47,0x47,0x47,0x07,0x07,0x47,0x47,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
0x80,0x80,0x80,0x81,0x81,0x81,0x81,0x81,0x81,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
0x80,0x80,0x81,0x83,0x03,0x03,0x03,0x03,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x07,0x00,0x01,0x03,0x03,0x03,0x03,0x03,0x81,0x80,0x80,0x80,0x80,
0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,
0x06,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF8,
0xF0,0xE0,0xC0,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x01,0x01,0x06,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0x06,0x01,0x01,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0xFC,0x6C,0x04,0x7C,0xFC,0xFC,0xC0,
0x40,0x40,0x40,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x06,0xFC,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,
0xA2,0x88,0x04,0xD2,0x88,0x24,0x42,0x10,0x08,0x44,0x42,0x20,0x88,0x04,0x42,0xBF,
0x1F,0x0F,0x47,0x0B,0x11,0x46,0x08,0x20,0x42,0x08,0x00,0x62,0x08,0x14,0x80,0x42,
0x08,0x20,0x08,0x42,0x08,0x80,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xA2,0x88,0x04,0xD2,0x88,0x24,0x42,
0x10,0x7F,0x7F,0x55,0x55,0xC1,0x69,0x7F,0x7F,0x7F,0x7F,0x7F,0x7F,0x7F,0xFF,0x7F,
0xF6,0x73,0x74,0x77,0x7F,0x08,0x14,0x80,0x42,0x08,0x20,0x08,0x42,0x08,0x80,0xFF,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x01,0x02,0x06,0x04,0x05,0x04,0x04,0x04,0x05,0x04,0x04,0x04,0x05,0x04,0x04,0x04,
0x05,0x04,0x04,0x05,0x04,0x04,0x05,0x04,0x04,0x05,0x04,0x04,0x05,0x04,0x04,0x04,
0x05,0x04,0x05,0x06,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x06,0x04,0x05,0x04,0x04,
0x04,0x05,0x04,0x04,0x04,0x05,0x04,0x04,0x04,0x05,0x04,0x04,0x05,0x04,0x04,0x05,
0x04,0x04,0x05,0x04,0x04,0x05,0x04,0x04,0x04,0x05,0x04,0x05,0x06,0x02,0x01,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};


// 变量定义
BirdStruct g_Bird;  //全局变量 小鸟的结构体
Pillarstruct *g_Pipehead; //全局变量，管道头指针
Pillarstruct pipe1,pipe2,pipe3;//设定最多三个管道同时存在

Arduboy2 arduboy;
At24c myeep;

uint16_t g_score;
uint16_t g_highscore;
uint8_t g_gamestatus;
unsigned char g_birdStatus;
unsigned char g_menustatus;
unsigned char per_menustatus=0;
bool ifrender = false;

uint8_t lastButtonState;
uint8_t currentButtonState;
static float pipemovespeed = 40.0;
static float birdflayupspeed = 50.0;
static float deltaFullspeed = 5.0;
const float delatpipemovespeed = 10.0;

// --------------  绘图函数 ------------------

void drawstring(int x,int y,char* str,int size){
    char *p = str;
    while(*p != '\0'){
        arduboy.drawChar(x,y,*p,1,0,size);
        p++;
        x+=size*6;
    }
}

int drawnumber(int x,int y,uint16_t number,int size){
    int k = (number > 9) ? drawnumber(x - size*4, y, number / 10, size) : 0;
    arduboy.drawChar(x+k,y,'0'+number%10,1,0,size);
    return k + size*4 - 4;
}

void StickimgInCanv(uint8_t x_2beplace,uint8_t y_2beplace_page,const unsigned char* img2bePlace,uint8_t y_start_page,uint8_t x_len,uint8_t y_len_page)
{
	uint8_t i,x_d,count,d;
	i=0;
	count=0;
	d=y_start_page*x_len;
	while(i!=y_len_page+1)
	{
		for(x_d=x_2beplace;x_d<x_len+x_2beplace;x_d++)
		{
			if(x_d==128)
			{
				count+=(x_len-128+x_2beplace);
				break;
			}
			arduboy.sBuffer[(y_2beplace_page+i)*8*16+x_d]|=img2bePlace[count+d];
			count++;
		}
		i++;
	}
}

void StickBirdInCanv(uint8_t x_2beplace,uint8_t y_2beplace,const unsigned char* Birdstatus)
{
	uint8_t deviation,page,count,x_count;
	page=y_2beplace/8;
	deviation=y_2beplace%8;
	count=0;
	for(x_count=x_2beplace;x_count<x_2beplace+15;x_count++)
	{
		arduboy.sBuffer[page*128+x_count]|=(Birdstatus[count]<<deviation);
		arduboy.sBuffer[(page+1)*128+x_count]|=(Birdstatus[count]>>(8-deviation));
		count++;
	}
	for(x_count=x_2beplace;x_count<x_2beplace+15;x_count++)
	{
		arduboy.sBuffer[(page+1)*128+x_count]|=(Birdstatus[count]<<deviation);
		arduboy.sBuffer[(page+2)*128+x_count]|=(Birdstatus[count]>>(8-deviation));
		count++;
	}
}

void Drawpipe(Pillarstruct *curPipe)
{
	if(curPipe->x>128)
	{
	}
	else
	{
		StickimgInCanv(curPipe->x,0,Pillar_DownOrientation,7-curPipe->y,20,curPipe->y);
		StickimgInCanv(curPipe->x,curPipe->y+curPipe->pillarClearance+1,Pillar_UpOrientation,0,20,7-curPipe->y-curPipe->pillarClearance-1);
	}
}

void ShowScore()
{
	drawnumber(10,0,g_score,1);
}

void DrawBirdAndPipe()
{
    if(g_gamestatus == GAME_PAUSE)  drawstring(20,30,"PAUSE",3);
        if(g_birdStatus==BirdFULL)
        {
            ShowScore();
            StickBirdInCanv(30,g_Bird.y,Birdflyup);
            Drawpipe(g_Pipehead);
            Drawpipe(g_Pipehead->nextpillar);
            Drawpipe(g_Pipehead->nextpillar->nextpillar);
        }
        else
        {
            ShowScore();
            StickBirdInCanv(30,g_Bird.y,Birdflydown);
            Drawpipe(g_Pipehead);
            Drawpipe(g_Pipehead->nextpillar);
            Drawpipe(g_Pipehead->nextpillar->nextpillar);
            // DisPlay();
            // delay_ms(frameInterval);
            g_birdStatus=BirdFULL;
        }
}


// ----------------- 辅助函数 ------------------

bool nextFrame(){
    bool res = arduboy.nextFrame();
    if(res)
    {
        lastButtonState = currentButtonState;
        currentButtonState  = arduboy.buttonsState();
    }
    return res;
}

bool buttonDown(uint8_t buttons)
{
    return currentButtonState & ~lastButtonState & buttons;
}

bool buttonPressed(uint8_t buttons)
{
    return currentButtonState & buttons;
}


bool buttonUp(uint8_t buttons)
{
    return ~currentButtonState & lastButtonState & buttons;
}

uint16_t eepReaduint16(int address){
    byte _highbyte = myeep.readByte(address);
    byte _lowbyte = myeep.readByte(address+1);
    uint16_t res = (uint16_t)_highbyte << 8 | (uint16_t)_lowbyte;
    return res;
}

void eepWriteuint16(int address,uint16_t val){
    byte _highbyte = (byte)(val>>8);
    byte _lowbyte = val & 0x00ff;
    myeep.writeByte(address,_highbyte);
    myeep.writeByte(address+1,_lowbyte);
}

// ---------------------- 逻辑函数 ----------------------
void PipeMove(int speed){
        float distance = (float)speed/GAME_FPS;
        g_Pipehead->nextpillar->x-=distance;
        g_Pipehead->nextpillar->nextpillar->x-=distance;
        g_Pipehead->x-=distance;
}

void BirdFreeFull()
{
	if(g_birdStatus==BirdFULL)
	{
		float lastFullSpeed;
		lastFullSpeed=g_Bird.fullspeed;
		g_Bird.fullspeed+=deltaFullspeed;
		g_Bird.y+=(float)lastFullSpeed/GAME_FPS;
	}
	else
	{
		g_Bird.y-=birdflayupspeed/GAME_FPS;
		g_Bird.fullspeed=0;
	}
}

void CheckCollision(void)
{
	unsigned char y_center;
	y_center=g_Bird.y+5;
	
	if(g_Pipehead->x==35.0)
		if((y_center<(g_Pipehead->y+1)*8)||(y_center>(g_Pipehead->y+g_Pipehead->pillarClearance+2)*8))
			g_gamestatus=GAME_OVER;
		
	if(g_Pipehead->x<35&&g_Pipehead->x>15)
		if((y_center<(g_Pipehead->y+1)*8+6)||(y_center>(g_Pipehead->y+g_Pipehead->pillarClearance+2)*8-10))
			g_gamestatus=GAME_OVER;
	if(g_Pipehead->x<10)
	{
		
		g_score+=1;
		g_Pipehead->x=g_Pipehead->nextpillar->nextpillar->x+60;
		g_Pipehead->y=random(3);
		g_Pipehead=g_Pipehead->nextpillar;
        if(g_score % 10 == 0){
            pipemovespeed+=delatpipemovespeed;
        }
	}
}

void CheckGameStatus()
{
    if(g_Bird.y>64)     g_gamestatus=GAME_OVER;
	if(g_Pipehead->x<=40)   CheckCollision();
}

void GameEnd()
{
    if(g_highscore > g_score){
        drawstring(30,0,"SCORE",2);
        drawnumber(56,30,g_score,4);
    }
    else{
        drawstring(18,0,"NEW RECODE",2);
        drawnumber(56,30,g_score,4);
        updatehighscore();
    }
}


// -------------------- 各模块的初始化 更新 渲染函数 -----------------------

void initmenu(){
    g_gamestatus = GAME_OVER;
    g_menustatus = MainMenu;
    per_menustatus = MainMenu;
    myeep.init();
    inithighscore();
    ifrender = true;
}

void updatemenu(){
    if(buttonDown(B_BUTTON)){
        // initgame();
        g_menustatus = BeginGame;
    }
    else if(buttonDown(A_BUTTON)){
        // updatehighscore();
        g_menustatus = HeightList;
    }
    else ifrender = true;
}

void rendermenu(){
    if(ifrender)    {
        arduboy.drawBitmap(0,0,gameBeginBeforeMenu,128,64);
        drawstring(80,56,GAME_VERSION,1);
    }
    else    return;
    ifrender = false;
}



void initgame(){
    g_score=0;
	g_gamestatus=GAME_CONTINUE;
	g_Bird.y=20;
	g_Bird.fullspeed=0;

    pipemovespeed = 40.0;
    birdflayupspeed = 50.0;
    deltaFullspeed = 5.0;

	g_Pipehead=&pipe1;
	pipe1.nextpillar=&pipe2;
	pipe2.nextpillar=&pipe3;
	pipe3.nextpillar=&pipe1;

	pipe1.x=120;
	pipe1.y=1;
	pipe1.pillarClearance=3;

	pipe2.x=180;
	pipe2.y=2;
	pipe2.pillarClearance=3;

	pipe3.x=240;
	pipe3.y=2;
	pipe3.pillarClearance=3;
}

void updategame(){
    if(buttonDown(A_BUTTON|B_BUTTON))   {
        g_gamestatus = (g_gamestatus == GAME_PAUSE)?GAME_CONTINUE:GAME_PAUSE;
    }

    if(buttonPressed(LEFT_BUTTON|RIGHT_BUTTON|DOWN_BUTTON|UP_BUTTON)){
        g_birdStatus=BirdRISE;
    }

    if(g_gamestatus != GAME_OVER & g_gamestatus!=GAME_PAUSE){
        PipeMove(pipemovespeed);
        CheckGameStatus();
        BirdFreeFull();
    }

    if(g_gamestatus == GAME_OVER)   {
        ifrender = false;
        if(buttonDown(A_BUTTON|B_BUTTON)){
            g_menustatus = MainMenu;
        }
    }
    else    ifrender = true;
}

void rendergame(){
    if(ifrender == true)    DrawBirdAndPipe();
    else GameEnd();

}



void inithighscore(){
    g_score = 0;
    g_highscore = eepReaduint16(FlappyBirdScore_ADDR);
}

void updatehighscore(){
    if(g_menustatus != HeightList){
        if(g_score > g_highscore){
            g_highscore = g_score;
            eepWriteuint16(FlappyBirdScore_ADDR,g_highscore);
        }
        else if(g_highscore == 0xffff){
            eepWriteuint16(FlappyBirdScore_ADDR,0);
        }
    }
    else{
        if(buttonDown(A_BUTTON|B_BUTTON)) {
            g_menustatus = MainMenu;
        }
        ifrender = true;
    }
}

void renderhigiscore(){
    drawstring(30,0,"HIGIEST",2);
    drawnumber(56,30,g_highscore,4);
    ifrender = false;
}